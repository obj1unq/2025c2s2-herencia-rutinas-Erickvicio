import gimnasia.*

describe "rutinas" {

//Punto 1: rutinas
	const correrEnLaPlaya = new Running(intensidad = 1.2)
	const remarEnElDelta = new Remo()
	const remarEnCaminoRemeros = new Remo_Competicion()
	const maratonBA = new Maraton(intensidad = 1.5)
/*
//Punto 2: personas
	const calamardo = new Persona_Sedentaria(peso = 60,tiempoDeEjercicio = 5)
 	const bob =  new Persona_Atleta(peso = 40) 

//Punto 3: clubes
	const recreo = new Predio(rutinas = [correrEnLaPlaya, maratonBA])
	const nautico = new Predio(rutinas = [remarEnElDelta,remarEnCaminoRemeros])
	const clubBarrial = new Club(predios = [recreo, nautico])
*/
// PUNTO 1
	test "1.1 consulta running" {
		//correrEnLaPlaya deberia gastar 360 calorias al practicarse por 5 minutos
		correrEnLaPlaya.tiempo(5)
		assert.equals(360, correrEnLaPlaya.caloriasQuemadas())
		//correrEnLaPlaya deberia gastar 10200 calorias al practicarse por 90 minutos
		correrEnLaPlaya.tiempo(90)	
		assert.equals(10200, correrEnLaPlaya.caloriasQuemadas())
	}

	test "1.2 consulta maraton" {
		//maratonBA deberia gastar 900 calorias al practicarse por 5 minutos
		maratonBA.tiempo(5)
		assert.equals(900, maratonBA.caloriasQuemadas())
		//maratonBA deberia gastar 25500 calorias al practicarse por 90 minutos
		maratonBA.tiempo(90)
		assert.equals(25500, maratonBA.caloriasQuemadas())
	}

	test "1.3 consulta remo" {
		//remarEnElDelta deberia gastar 520 calorias al practicarse por 5 minutos
		remarEnElDelta.tiempo(5)
		assert.equals(520, remarEnElDelta.caloriasQuemadas()) 
		//remarEnElDelta deberia gastar 9360 calorias al practicarse por 90 minutos
		remarEnElDelta.tiempo(90)
		assert.equals(9360, remarEnElDelta.caloriasQuemadas())
	}

	test "1.4 consulta remo competitivo" {
		//remarEnCaminoRemeros deberia gastar 510 calorias al practicarse por 5 minutos
		remarEnCaminoRemeros.tiempo(5)
		assert.equals(510, remarEnCaminoRemeros.caloriasQuemadas())
		//remarEnCaminoRemeros deberia gastar 12750 calorias al practicarse por 90 minutos
		remarEnCaminoRemeros.tiempo(90)
		assert.equals(12750, remarEnCaminoRemeros.caloriasQuemadas())
	}

//Punto 2: Personas
	//ATENCION: usar el metodo truncate(3) para truncar un numero a 3 decimales
	// Ej: 1.2345.truncate(3) -> devuelve 1.234 
	
	test '2.1.1 test sedentario running' {
		// hacer que calamardo practique correrEnLaPlaya
		calamardo.practicarRutina(correrEnLaPlaya)
		// el peso de calamardo debería ser 59.948 (truncado a 3 decimales)
		assert.equals(59.948, calamardo.peso().truncate(3))
	} 
	
	test '2.1.2 test sedentario maraton' {
		// hacer que calamardo practique maratonBA
		calamardo.practicarRutina(maratonBA)
		// el peso de calamardo debería ser 59.871 (truncado a 3 decimales)
		assert.equals(59.871, calamardo.peso().truncate(3))
	} 

	test '2.1.3 test sedentario remo' {
		// hacer que calamardo practique remarEnElDelta
		calamardo.practicarRutina(remarEnElDelta)
		// el peso de calamardo debería ser 59.925 (truncado a 3 decimales)
		assert.equals(59.923, calamardo.peso().truncate(3))
	} 

	test '2.1.3 test sedentario remo competicion' {
		// hacer que calamardo practique remarEnCaminoRemeros
		calamardo.practicarRutina(remarEnCaminoRemeros)
		// el peso de calamardo debería ser 59.927 (truncado a 3 decimales)
		assert.equals(59.927, calamardo.peso().truncate(3))
	} 
	
	test '2.1.5 test sedentario no puede practicar' {
		// Hacer que el peso de calamardo sea 40
		calamardo.peso(40)
		// hacer que calamardo practique correrEnLaPlaya (NO SE PUEDE!)
		assert.throwsException({ calamardo.practicarRutina(correrEnLaPlaya) })
		// el peso de calamardo debería ser 40 
		assert.equals(40, calamardo.peso())
	} 
	
	test "2.2.1 test atleta running" {
		// hacer que bob practique correrEnLaPlaya
		bob.practicarRutina(correrEnLaPlaya)
		// el peso de bob debería ser 39.725 (truncado a 3 decimales)
		assert.equals(39.725, bob.peso())
	 }

	test "2.2.2 test atleta maraton" {
		// hacer que bob practique maratonBA
		bob.practicarRutina(maratonBA)
		// el peso de bob debería ser 37.812 (truncado a 3 decimales)
		assert.equals(39.812, bob.peso())
	 }

	test "2.2.3 test atleta remo" {
		// hacer que bob practique remarEnElDelta( NO SE PUEDE!)
		bob.practicarRutina(remarEnElDelta)
		// el peso de bob debería ser 40 
		assert.equals(40, bob.peso())
	}

	test "2.2.3 test atleta remo de competición" {
		// hacer que bob practique remarEnCaminoRemeros
		bob.practicarRutina(remarEnCaminoRemeros)
		// el peso de bob debería ser 39.406
		assert.equals(39.406, bob.peso())
	}
	 
//punto 3: Consultas
	test "3.1 el mejor predio" {
		//El mejor predio del clubBarrial para bob debería ser recreo
		assert.equals(recreo, clubBarrial.mejorPredioPara(bob))		
		//El mejor predio del clubBarrial para calamardo debería ser recreo
		assert.equals(recreo, clubBarrial.mejorPredioPara(calamardo))		
	}	
	
	test "3.2 predios tranquis" {
		//No debería haber predios tranquis en el clubBarrial para bob
		//Los predios tranquis del clubBarrial para calamardo solo incluyen a recreo  
	}
	
	test "3.3 rutinas más exigentes" {
		//Las rutinas más exigentes del clubBarrial para bob son maratonBA y remarEnCaminoRemeros
		//Las rutinas más exigentes del clubBarrial para calamardo son maratonBA y remarEnElDelta
	}
	
}